<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Christian Jauvin</title><link>https://cjauvin.github.io/</link><description>Recent content on Christian Jauvin</description><generator>Hugo -- 0.151.2</generator><language>en-us</language><lastBuildDate>Mon, 20 Oct 2025 08:57:40 -0400</lastBuildDate><atom:link href="https://cjauvin.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Proof of Prompt</title><link>https://cjauvin.github.io/posts/proof-of-prompt/</link><pubDate>Mon, 20 Oct 2025 08:57:40 -0400</pubDate><guid>https://cjauvin.github.io/posts/proof-of-prompt/</guid><description>&lt;p&gt;When I&amp;rsquo;m doing freelance software development projects and I&amp;rsquo;m asked how much
time things will take, it&amp;rsquo;s always very hard to answer. It&amp;rsquo;s a very high
dimensional problem, and you have many degrees of freedom: how much should you
charge, should you do it per hour or not, if you use AI how should it be
factored in the efforts and time you report, what is the separation between the
stuff that you charge and the stuff for which you don&amp;rsquo;t charge, does asking
questions to your client to better understand the problem, on Slack in the
weekend, count as time or not? Faced with these doubts, I guess that most people
are quite happy to fudge a rough number, do a couple of rounds of negotiation
about it, reach an agreement, and call it a day. They implicitly accept that the
outcome of this process can go both ways: either you estimated too low, and this
way you will lose something, or the contrary. And you hope that in the grand
scheme of things, things should average out in a reasonable way: either your
loss, or their loss, who cares in the end? But is is really working this way?&lt;/p&gt;</description></item><item><title>Ignore Your Check Engine Light at Your Own Peril</title><link>https://cjauvin.github.io/posts/check-engine-light/</link><pubDate>Sun, 05 Oct 2025 12:26:37 -0400</pubDate><guid>https://cjauvin.github.io/posts/check-engine-light/</guid><description>&lt;p&gt;Currently in my car I have the &amp;ldquo;check engine&amp;rdquo; light being on, but it&amp;rsquo;s ok,
because I know what is the problem, my mechanic told me that it&amp;rsquo;s &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt;,
and that even though it&amp;rsquo;s not ideal, it can wait while he finds the part to
repair it (apparently it&amp;rsquo;s not so easy to find).&lt;/p&gt;
&lt;p&gt;&lt;img loading="lazy" src="https://cjauvin.github.io/images/check-engine-light.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There is something I don&amp;rsquo;t like about this though: if there is a NEW problem
appearing, I won&amp;rsquo;t know about it, because this check engine light has only one
state, and now it&amp;rsquo;s being used.&lt;/p&gt;</description></item><item><title>Learning Persian with Anki, ChatGPT and YouTube</title><link>https://cjauvin.github.io/posts/learning-persian/</link><pubDate>Mon, 22 Sep 2025 19:22:28 -0400</pubDate><guid>https://cjauvin.github.io/posts/learning-persian/</guid><description>&lt;p&gt;I&amp;rsquo;ve been learning Persian (Farsi) for a while now, and I&amp;rsquo;m using a bunch of
tools for it. The central one is certainly &lt;a href="https://ankiweb.net"&gt;Anki&lt;/a&gt;, a spaced
repetition app to train memory. I&amp;rsquo;m creating my own never-ending deck of cards,
with different types of content, for different purposes. The most frequent type
of cards is grammar focused phrases (very rarely single words) coming sometimes
from my own daily life, but also very often directly from videos of the &lt;a href="https://www.youtube.com/@PersianLearning"&gt;Persian
Learning&lt;/a&gt; YouTube channel, created by
Majid, a very talented and nice Persian teacher, in my opinion.&lt;/p&gt;</description></item><item><title>An Excel-like editable data grid widget with Streamlit</title><link>https://cjauvin.github.io/posts/streamlit-editable-datatable-demo/</link><pubDate>Sat, 13 Sep 2025 10:39:07 -0400</pubDate><guid>https://cjauvin.github.io/posts/streamlit-editable-datatable-demo/</guid><description>&lt;p&gt;I recently spent a lot of time trying to come up with an interactive data grid
widget in &lt;a href="https://streamlit.io"&gt;Streamlit&lt;/a&gt;. It needed to be a bit like Excel:
the value you enter in a cell should trigger the recomputation of the value in
another cell. At first I assumed it would be relatively easy, but given the
powerful state management model at the heart of Streamlit, I found out that it
wasn&amp;rsquo;t. State management for UI programming remains a hard problem, no matter
what is the environment. The most difficult aspect of React programming, for
instance, is certainly state management. The user-driven asynchronous nature of
a UI makes it an inherently difficult problem.&lt;/p&gt;</description></item><item><title>What if AI Had Come First?</title><link>https://cjauvin.github.io/posts/what-if-ai-had-come-first/</link><pubDate>Thu, 29 May 2025 20:11:18 -0400</pubDate><guid>https://cjauvin.github.io/posts/what-if-ai-had-come-first/</guid><description>&lt;p&gt;Imagine an alternate history in which AI, in the sense of our current
LLMs, had come first. This possibly means that things would have
looked much more like they did in the &lt;em&gt;2001: A Space Odyssey&lt;/em&gt; movie:
computers having a user interface so powerful that you don&amp;rsquo;t really
need anything else (apart from a set of fancy looking dashboards
maybe).&lt;/p&gt;
&lt;p&gt;But this is not what we got. First we got something that looked quite
a bit like an idealized &amp;ldquo;command box&amp;rdquo; (not vocal though, but textual),
with which you could give instructions to the computer, almost as if
you were talking to it. But not quite. These instructions had to be
expressed in a &amp;ldquo;language&amp;rdquo; that the computer could understand, and of
course it was far from human natural language. Very close to that
command box was the notion of a written program that you could give to
the machine, and which would be executed as a kind of chain of
commands, in long form, with more elaborate logic and syntax.&lt;/p&gt;</description></item><item><title>AI in the Enterprise (what do you really think will happen?)</title><link>https://cjauvin.github.io/posts/ai-in-the-enterprise/</link><pubDate>Tue, 27 May 2025 13:26:46 -0400</pubDate><guid>https://cjauvin.github.io/posts/ai-in-the-enterprise/</guid><description>&lt;p&gt;There&amp;rsquo;s a cottage industry of AI gurus who extol the virtues of being
open about the advent of AI in the enterprise. Don&amp;rsquo;t be shy about it,
AI is powerful enough as it is, and it can already help in the current
state of its evolution (mainly, powerful chatbots that have access to
certain &amp;ldquo;tools&amp;rdquo;, and vendor APIs with which to build some more
customized applications, backed by cloud LLMs).&lt;/p&gt;</description></item><item><title>On Being Obsessive or Efficient</title><link>https://cjauvin.github.io/posts/on-being-obsessive-or-efficient/</link><pubDate>Wed, 07 May 2025 16:27:18 -0400</pubDate><guid>https://cjauvin.github.io/posts/on-being-obsessive-or-efficient/</guid><description>&lt;p&gt;I was recently thinking about a dimension of intelligence and the mind
that might have played a role in my school results of the past, and
also my taste for computer programming. When you are taking an exam,
careful management of your time might be a very good skill to possess,
in the sense that if you are stuck on a given hard question, it might
be preferable to rapidly switch on another one, with the goal of
maximizing your overall exam grade, rather than completeness. But for
some people, this, in itself, is difficult.&lt;/p&gt;</description></item><item><title>Conveying Math Intuition Is Hard</title><link>https://cjauvin.github.io/posts/conveying-math-intuition-is-hard/</link><pubDate>Sun, 04 May 2025 09:24:33 -0400</pubDate><guid>https://cjauvin.github.io/posts/conveying-math-intuition-is-hard/</guid><description>&lt;p&gt;&lt;a href="https://www.3blue1brown.com/"&gt;3blue1brown&lt;/a&gt; recently felt the need to
add a &lt;a href="https://www.youtube.com/watch?v=Dlsa9EBKDGI"&gt;supplementary video&lt;/a&gt;
to its &lt;a href="https://www.youtube.com/watch?v=RQWpF2Gb-gU"&gt;Grover&amp;rsquo;s algorithm introduction&lt;/a&gt;.
Apparently, a lot of people have been confused by what I believe is
basically just the logical structure of the concept, or why this
algorithm is interesting and surprising in the first place.&lt;/p&gt;
&lt;p&gt;For someone who only knows about classical computing and a little
about algorithm complexity, the simplest way to get an intuition about
Grover&amp;rsquo;s algorithm might be to first consider this:&lt;/p&gt;</description></item><item><title>Extremely Quick Pacman-based OOP Primer</title><link>https://cjauvin.github.io/posts/quick-oop-primer-with-pacman/</link><pubDate>Fri, 12 Jan 2024 18:08:40 -0500</pubDate><guid>https://cjauvin.github.io/posts/quick-oop-primer-with-pacman/</guid><description>&lt;p&gt;I have a friend who wanted to have a quick idea about whether he
should use classes and objects for his project. Of course I told him
that it depends.. on many aspects. He says that he doesn&amp;rsquo;t really like
tutorials, so here I want to propose something more compact: the
skeleton of a Pacman game, just the most basic concepts, without any
bells and whistles (so of course not playable, although almost
runnable).&lt;/p&gt;</description></item><item><title>Il y a au moins quatre types de programme</title><link>https://cjauvin.github.io/posts/4-types-de-programme/</link><pubDate>Sat, 29 Jan 2022 11:58:40 -0500</pubDate><guid>https://cjauvin.github.io/posts/4-types-de-programme/</guid><description/></item></channel></rss>